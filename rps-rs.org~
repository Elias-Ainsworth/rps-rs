#+title: Rock, Paper, Scissors...in Rust
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./assets/gruvbox-dark.css"/>
#+HTML_HEAD: <script>
#+HTML_HEAD: document.addEventListener("DOMContentLoaded", function () {
#+HTML_HEAD:   document.querySelectorAll("pre").forEach(function (pre) {
#+HTML_HEAD:     const button = document.createElement("button");
#+HTML_HEAD:     button.textContent = "ðŸ“‹ Copy";
#+HTML_HEAD:     button.onclick = () => {
#+HTML_HEAD:       navigator.clipboard.writeText(pre.innerText);
#+HTML_HEAD:       button.textContent = "âœ… Copied!";
#+HTML_HEAD:       setTimeout(() => button.textContent = "ðŸ“‹ Copy", 2000);
#+HTML_HEAD:     };
#+HTML_HEAD:     const wrapper = document.createElement("div");
#+HTML_HEAD:     wrapper.style.cssText = "position:relative;";
#+HTML_HEAD:     pre.parentNode.insertBefore(wrapper, pre);
#+HTML_HEAD:     wrapper.appendChild(pre);
#+HTML_HEAD:     wrapper.appendChild(button);
#+HTML_HEAD:   });
#+HTML_HEAD: });
#+HTML_HEAD: </script>

* Description
This is a simple, blazingly fast, rock paper scissors game written in
Rust.

* Installation
** Source
1. Clone the git repository:

   #+begin_src shell
   git clone https://github.com/Elias-Ainsworth/rps-rs
   #+end_src

2. Enter the project directory and compile the program:

   #+begin_src shell
   cd rps-rs
   cargo build --release
   #+end_src

3. Run the compiled binary:

   #+begin_src shell
   cd target/release
   ./rps-rs
   #+end_src

** Nix
If you have nix installed, you can run this program without any
compilation with the following command:

#+begin_src shell
nix run github:Elias-Ainsworth/rps-rs
#+end_src

To install it on your system just add the link to your flake input and
add the exposed package to your =home.packages= or
=environment.systemPackages= (please for the love of God, don't do
this unless you really like installing bad cli games).

* Usage
After running the program using it is pretty intuitive. You're
presented with a menu to select from the following game modes:
    1. Single: One round of Rock, Paper, Scissors
    2. Best of 3
    3. Best of 5
    4. Best of 7
After which you can play the game by inputting your pick of the
three when prompted and you are then presented with a score-board
of the results after each round...honestly nothing special.

* The Code
** Cargo.toml
Rust's package manager is Cargo and in this assignment I used a total
of 2 crates:
1. rand: For random number generation.
2. colored: To make things look pretty with colors.

#+begin_src toml :tangle Cargo.toml
[package]
name = "rps-rs"
version = "0.1.0"
edition = "2024"

[dependencies]
colored = "3.0.0"
rand = "0.9.1"
#+end_src

** state.rs
This file includes an enum named =State= that allows me to modularly
and idiomatically get and manage the state of the game.

It also implements the =Display= trait to decrease repetition.

#+begin_src rust :tangle src/state.rs
use std::fmt::{self, Display};

pub enum State {
    Win,
    Loss,
    Tie,
}

impl Display for State {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Self::Win => write!(f, "You Win!"),
            Self::Loss => write!(f, "You Lose!"),
            Self::Tie => write!(f, "It's a Tie!"),
        }
    }
}
#+end_src

** hand.rs
This file includes an enum named =Hand= that allows me to modularly and
idiomatically get and manage the hand (rock, paper, or scissors).

It also implements the =Display= trait to decrease repetition, and
custom functions:
1. =random=: Generates a random hand, by generating a random number in
   the range 1 to 3 inclusive of 3 and assigning each value to a
   respective hand.
2. =from_input=: Takes a string slice as an input and pattern matches
   rock, paper, and scissors to their respective enum variants.
3. =beats=: Takes two hands (the players hand and the computers) and
   sees if the first's beats the second's.

#+begin_src rust :tangle src/hand.rs
use std::fmt::{self, Display};

use rand::Rng;

#[derive(Debug, PartialEq, Eq)]
pub enum Hand {
    Rock,
    Paper,
    Scissors,
}

impl Display for Hand {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Self::Rock => write!(f, "rock"),
            Self::Paper => write!(f, "paper"),
            Self::Scissors => write!(f, "scissors"),
        }
    }
}

impl Hand {
    pub fn random() -> Self {
        match rand::rng().random_range(1..=3) {
            1 => Self::Rock,
            2 => Self::Paper,
            _ => Self::Scissors,
        }
    }
    pub fn from_input(input: &str) -> Option<Self> {
        match input.trim().to_lowercase().as_str() {
            "rock" => Some(Self::Rock),
            "paper" => Some(Self::Paper),
            "scissors" => Some(Self::Scissors),
            _ => None,
        }
    }
    pub fn beats(&self, other: &Self) -> bool {
        matches!(
            (self, other),
            (Self::Rock, Self::Scissors)
                | (Self::Scissors, Self::Paper)
                | (Self::Paper, Self::Rock)
        )
    }
}
#+end_src

** mode.rs
This file includes an enum named =Mode= that allows me to modularly
and idiomatically get and manage the hand (rock, paper, or scissors).

It also implements custom functions:
1. =max_rounds=: Pattern matches the max numbers of rounds per mode
   based off of the =Mode= variant provided.
2. =required_rounds=: Uses the output of =max_rounds= to calculate the
   required number of rounds to win the game.
3. =final_state=: Determines the final state of the game based
   =player_wins=, =computer_wins=, and =rounds_played=.
4. =play_rounds=: Loops through the number of times required based on
   the selected game mode. It does break if =player_wins= or
   =computer_wins= are greater than or equal to the =required= amount
   of wins.
5. =prompt_mode=: Prints an interactive prompt to choose between the
   available game modes.

#+begin_src rust :tangle src/mode.rs
use std::io::{self, Write};

use colored::Colorize;

use crate::{Hand, State};

pub enum Mode {
    Single,
    BestOf3,
    BestOf5,
    BestOf7,
}

impl Mode {
    pub fn max_rounds(&self) -> u8 {
        match self {
            Self::Single => 1,
            Self::BestOf3 => 3,
            Self::BestOf5 => 5,
            Self::BestOf7 => 7,
        }
    }
    pub fn required_wins(&self) -> u8 {
        (self.max_rounds() / 2) + 1
    }
    pub fn final_state(
        &self,
        player_wins: u8,
        computer_wins: u8,
        rounds_played: u8,
    ) -> Option<State> {
        let max = self.max_rounds();
        let required = self.required_wins();

        if player_wins >= required {
            Some(State::Win)
        } else if computer_wins >= required {
            Some(State::Loss)
        } else if rounds_played >= max {
            if player_wins > computer_wins {
                Some(State::Win)
            } else if computer_wins > player_wins {
                Some(State::Loss)
            } else {
                Some(State::Tie)
            }
        } else {
            None
        }
    }
    pub fn play_rounds(&self) -> Result<(), Box<dyn std::error::Error>> {
        let mut player_wins: u8 = 0;
        let mut computer_wins: u8 = 0;
        let mut rounds_played: u8 = 0;
        let mut ties: u8 = 0;

        loop {
            print!("Rock, Paper, Scissors...GO! ");
            io::stdout().flush()?;

            let mut input = String::new();
            io::stdin().read_line(&mut input)?;
            let player = match Hand::from_input(&input) {
                Some(hand) => hand,
                None => {
                    println!();
                    println!(
                        "{}",
                        "Invalid hand. Try rock, paper, or scissors.".red().bold()
                    );
                    println!();
                    continue;
                }
            };

            let computer = Hand::random();

            println!();
            println!("Your choice: {}", player.to_string().blue().bold());
            println!(
                "Computer's choice: {}",
                computer.to_string().magenta().bold()
            );
            println!();

            rounds_played += 1;

            if player == computer {
                ties += 1;
            } else if player.beats(&computer) {
                player_wins += 1;
            } else {
                computer_wins += 1;
            }
            println!(
                "Round {}:\n| Player: {} | Computer: {} | Ties: {} |",
                rounds_played.to_string().cyan(),
                player_wins.to_string().green(),
                computer_wins.to_string().red(),
                ties.to_string().yellow()
            );
            println!();
            println!("---------------------");
            println!();

            if let Some(state) = self.final_state(player_wins, computer_wins, rounds_played) {
                match state {
                    State::Win => {
                        println!(
                            "{} {}",
                            "GAME OVER".bold().black().on_green(),
                            state.to_string().green().bold()
                        )
                    }
                    State::Loss => println!(
                        "{} {}",
                        "GAME OVER".bold().black().on_red(),
                        state.to_string().red().bold()
                    ),
                    State::Tie => {
                        println!(
                            "{} {}",
                            "GAME OVER".bold().black().on_yellow(),
                            state.to_string().yellow().bold()
                        )
                    }
                }
                break;
            }
        }
        Ok(())
    }
    pub fn prompt_mode() -> Result<Self, Box<dyn std::error::Error>> {
        println!(
            "{}",
            r#"Select Game Mode:
                1) Single
                2) Best of 3
                3) Best of 5
                4) Best of 7"#
        );

        print!("{}", "Mode: ");
        io::stdout().flush()?;

        let mut input = String::new();
        io::stdin().read_line(&mut input)?;
        let mode: Self = match input.trim() {
            "1" => Self::Single,
            "2" => Self::BestOf3,
            "3" => Self::BestOf5,
            "4" => Self::BestOf7,
            _ => return Err("Invalid input".into()),
        };

        println!();
        println!("---------------------");
        println!();

        Ok(mode)
    }
}
#+end_src

** lib.rs
This file imports the modules defined above and re-exports the
necessary enums along with their associated implementations, making
them accessible throughout the rest of the project.

#+begin_src rust :tangle src/lib.rs
pub mod hand;
pub mod mode;
pub mod state;

pub use hand::Hand;
pub use mode::Mode;
pub use state::State;
#+end_src

** main.rs
This is the main file of the project, meaning its contents determine
the entry point and what gets compiled and executed.
It is short and sweet by design in order to improve readability, and
to stick to =DRY= (Don't Repeat Yourself), hence the numerous
abstractions that provide for scalability in the long haul -not that
this program needs it.

#+begin_src rust :tangle src/main.rs
use rps_rs::Mode;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mode = Mode::prompt_mode()?;
    mode.play_rounds()?;
    Ok(())
}
#+end_src

* Demo
[[https://asciinema.org/a/k60wr2aAmm1rqwYqC4Eid3onJ][[[https://asciinema.org/a/k60wr2aAmm1rqwYqC4Eid3onJ.svg][Click to view interactive demo]]]]

#+HTML: <script src="https://asciinema.org/a/k60wr2aAmm1rqwYqC4Eid3onJ.js" id="asciicast-k60wr2aAmm1rqwYqC4Eid3onJ" async="true"></script>
#+HTML: <asciinema-player src="" preload></asciinema-player>
#+HTML_HEAD_EXTRA: <script src="https://asciinema.org/a/player.js" async></script>
